Determine if a given binary tree is binary search tree.

Assumptions

There are no duplicate keys in binary search tree.
You can assume the keys stored in the binary search tree can not be Integer.MIN_VALUE or Integer.MAX_VALUE.
Corner Cases

What if the binary tree is null? Return true in this case.\

Solution: 
recursive.
Pass value down and return the result back.
Base case: if null return true 
           else if key not in range, return false 
recursive rule: return isBST(roo.left, min, root.key) && isBST(root.right, root.key, max)

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public boolean isBST(TreeNode root) {
    // Write your solution here.
    return helper(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
  }
  
  private boolean helper(TreeNode root, int min, int max) {
    if (root == null) {
      return true;
    } else if (root.key >= max || root.key <= min) {
      return false; 
    }
    
    return helper(root.left, min, root.key)  
          && helper(root.right, root.key, max);
  }
}
