Check if a given binary tree is balanced. A balanced binary tree is one in which the depths of every nodeâ€™s left and right subtree differ by at most 1.

Examples

        5

      /    \

    3        8

  /   \        \

1      4        11

is balanced binary tree,

        5

      /

    3

  /   \

1      4

is not balanced binary tree.

Corner Cases

What if the binary tree is null? Return true in this case.
How is the binary tree represented?

We use the level order traversal sequence with a special symbol "#" denoting the null node.

For Example:

The sequence [1, 2, 3, #, #, 4] represents the following binary tree:

    1

  /   \

 2     3

      /

    4
    
Solution:
Use recursion. 
Base case: root == null, return 
Recursive rule: dif(getHeight(root.left), geiHeight(root.right)) > 1 return false 
                return isBalanced(root.left) && isBalanced(root.right) 

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public boolean isBalanced(TreeNode root) {
    // Write your solution here.
    if (root == null) {
      return true; 
    }
    
    if (Math.abs(getHeight(root.left) - getHeight(root.right)) > 1) {
      return false;
    }
    
    return isBalanced(root.left) && isBalanced(root.right);
  }
  
  private int getHeight(TreeNode root) {
    if (root == null) {
      return 0; 
    }
    
    return Math.max(getHeight(root.left), getHeight(root.right)) + 1; 
  } 
  
  
  
}
