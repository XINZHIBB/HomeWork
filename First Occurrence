Given a target integer T and an integer array A sorted in ascending order, find the index of the first occurrence of T in A or return -1 if there is no such index.

Assumptions

There can be duplicate elements in the array.
Examples

A = {1, 2, 3}, T = 2, return 1
A = {1, 2, 3}, T = 4, return -1
A = {1, 2, 2, 2, 3}, T = 2, return 1
Corner Cases

What if A is null or A of zero length? We should return -1 in this case.

Solution:
Binary search. 
Two pointer point to the first element of the array and the last element of the array. 
Then get the mid element and compare it with the target. 
If mid element == target then move the right pointer to this mid element, 右边的数一定大于或者等于target，但是我们需要找寻第一个
所以移动右指针，只用找左边部分。
If mid element < target then move the left to mid or mid + 1; 
If mid element > target then move the right to mid or mid + 1; 

public class Solution {
  public int firstOccur(int[] array, int target) {
    // Write your solution here
    // Sanity Check 
    if (array == null || array.length == 0) {
      return -1;
    }
    
    int left = 0;
    int right = array.length - 1;
    
    while (left < right - 1) { // when left neighber right, terminate
      int mid = left + (right - left) / 2;
      if (array[mid] == target) {
        right = mid;
      } else if (array[mid] < target) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    // post-processing 
    if (array[left] == target) {
      return left; 
    } else if (array[right] == target) {
      return right;
    }
    
    return -1;
  }
}
