
Graph
Bipartite
Determine if an undirected graph is bipartite. A bipartite graph is one in which the nodes can be divided into two groups such that no nodes have direct edges to other nodes in the same group.

Examples

1  --   2

    /   

3  --   4

is bipartite (1, 3 in group 1 and 2, 4 in group 2).

1  --   2

    /   |

3  --   4

is not bipartite.

Assumptions

The graph is represented by a list of nodes, and the list of nodes is not null.

Solution:
考虑到Graph中所有的node并没有全部连接在一起

Step1: Create a HashMap store <GrapNode, group>, group can be indicates by int 0/1
Step2: For each node, treated as starting node and use BFS to traverse its all neighbors
BST Function: 
Step1: If this node is visited, return true. 
Step2: Create a Queue and push the node in it, add it to HaspMap
Step3: While the queue is not empty, repeat the following step4
Step4:  poll the item from queue and assign group to its neighbor
        foreach neighbor, 
        case1: not visited, push it to hashmap with another group, push it to queue. 
        case2: visited, check if the group is expected
               case2.1: match do nothing 
               case2.2: return false 
Step5: After the queue is empty, return true. 

Time Complexity: o(n) 
Space Complexity: o(n)

/**
 * public class GraphNode {
 *   public int key;
 *   public List<GraphNode> neighbors;
 *   public GraphNode(int key) {
 *     this.key = key;
 *     this.neighbors = new ArrayList<GraphNode>();
 *   }
 * }
 */
public class Solution {
  public boolean isBipartite(List<GraphNode> graph) {
    // write your solution here
    HashMap<GraphNode, Integer> visited= new HashMap<GraphNode, Integer>();
    for (GraphNode node : graph) {
      if (!BST(node, visited)) {
        return false; 
      }
    }
    return true; 
  }
  
  private boolean BST(GraphNode node, HashMap<GraphNode, Integer> visited) {
    if (visited.containsKey(node)) {
      return true; 
    }
    Queue<GraphNode> queue = new LinkedList<GraphNode>(); 
    queue.offer(node); 
    visited.put(node, 0); //random pick 0 / 1 
    while (!queue.isEmpty()) {
      GraphNode cur = queue.poll(); 
      int curGroup = visited.get(cur);
      int neiGroup = curGroup == 0 ? 1 : 0; 
      for (GraphNode nei : cur.neighbors) {
        if (!visited.containsKey(nei)) {
          queue.offer(nei); 
          visited.put(nei, neiGroup); 
        } else if (neiGroup != visited.get(nei)) {
          return false; 
        }
      }
    }
    return true; 
  }
}





