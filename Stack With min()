Enhance the stack implementation to support min() operation. min() should return the current minimum value in the stack. 
If the stack is empty, min() should return -1.

pop() - remove and return the top element, if the stack is empty, return -1

push(int element) - push the element to top
top() - return the top element without remove it, if the stack is empty, return -1
min() - return the current min value in the stack.

Solution: 
one Stack is to store all the elements.
Another Stack is to store the min elements. When the new element is smaller or equals to min elements, we push it into the minStack. 
stack    || 2 3 1 
minStack || 2 1 

code 没有空间优化。

public class Solution {
  private Deque<Integer> stack; 
  private Deque<Integer> minStack; 
  public Solution() {
    // write your solution here
    stack = new LinkedList<Integer>(); 
    minStack = new LinkedList<Integer>(); 
  }
  
  public int pop() { 
    if (minStack.isEmpty()) {
      return -1; 
    }
    minStack.pollFirst(); 
    return stack.pollFirst(); 
  }
  
  public void push(int element) {
    stack.offerFirst(element);
    if (minStack.isEmpty() || element < minStack.peekFirst()) {
      minStack.offerFirst(element);
    } else {
      minStack.offerFirst(minStack.peekFirst());
    }
  }
  
  public int top() {
    if (stack.isEmpty()) {
      return -1; 
    }
    
    return stack.peekFirst();
  }
  
  public int min() {
    if (stack.isEmpty()) {
      return -1;
    }
    return minStack.peekFirst(); 
  }
}
