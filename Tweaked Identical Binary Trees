Determine whether two given binary trees are identical assuming any number of ‘tweak’s are allowed. A tweak is defined as a swap of the children of one node in the tree.

Examples

        5

      /    \

    3        8

  /   \

1      4

and

        5

      /    \

    8        3

           /   \

          1     4

the two binary trees are tweaked identical.

How is the binary tree represented?

We use the level order traversal sequence with a special symbol "#" denoting the null node.

For Example:

The sequence [1, 2, 3, #, #, 4] represents the following binary tree:

    1

  /   \

 2     3

      /

    4
    
Solution: 
figure out that two situations, symmetric or tweaked 
recursion. 
Base case: root1 == root 2 == null return true 
           root1 == null || root 2 == null return false 
           root1.key != root 2 return false 
recursion rule: return (root1.left, roo2.right) && (root1.right, root2.left) 
                       || (root1.right, root2.right) && (root1.left, root2.left)
                        
/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public boolean isTweakedIdentical(TreeNode one, TreeNode two) {
    // Write your solution here.
    if (one == null && two == null) {
      return true;
    } else if (one == null || two == null) {
      return false;
    } else if (one.key != two.key) {
      return false; 
    }
    
    return isTweakedIdentical(one.left, two.right) && isTweakedIdentical(one.right, two.left)
           || isTweakedIdentical(one.left, two.left) && isTweakedIdentical(one.right, two.right);
  }
}
 
