Check if a given binary tree is completed. A complete binary tree is one in which every level of the binary tree is
completely filled except possibly the last level. Furthermore, all nodes are as far left as possible.

Examples

        5

      /    \

    3        8

  /   \

1      4

is completed.

        5

      /    \

    3        8

  /   \        \

1      4        11

is not completed.

Corner Cases

What if the binary tree is null? Return true in this case.
How is the binary tree represented?

We use the level order traversal sequence with a special symbol "#" denoting the null node.

For Example:

The sequence [1, 2, 3, #, #, 4] represents the following binary tree:

    1

  /   \

 2     3

      /

    4
    
Solution: 
Find the rule of the complete Binary tree.
only one node can miss its right node. 
When this node is found, the rest nodes must miss its two children. 
When all the nodes are expanded, return true. 
分析清楚所有的情况

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public boolean isCompleted(TreeNode root) {
    // Write your solution here.
    if (root == null) {
      return true;
    }
    
    Queue<TreeNode> stack = new LinkedList<TreeNode>();
    stack.offer(root); 
    boolean flag = false; 
    while (!stack.isEmpty()) {
      TreeNode cur = stack.poll();
      if (cur.left == null && cur.right != null) {
        return false; 
      } else if (cur.left != null && cur.right == null) {
        if (flag) {
          return false;
        } else {
          flag = true; 
          stack.offer(cur.left);
        }
      } else if (cur.left != null && cur.right != null) {
        if (flag) {
          return false;
        } else {
          stack.offer(cur.left);
          stack.offer(cur.right);
        }
      }
    }
    return true; 
  }
}
