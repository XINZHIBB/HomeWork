Find the K smallest numbers in an unsorted integer array A. The returned numbers should be in ascending order.

Assumptions

A is not null
K is >= 0 and smaller than or equal to size of A
Return

an array with size K containing the K smallest numbers in ascending order
Examples

A = {3, 4, 1, 2, 5}, K = 3, the 3 smallest numbers are {1, 2, 3}


Solution: 
Step1: Create a MAX_HEAP size = k using the first k elements in the array  o(klogk)
Step2: For the rest elements in array      o((n-k)logk)
       foreach element
            if element >= the top of the heap, then do nothgin 
            if element < the top of the heap, then replace the top with this element. 
            如果等于的时候也replace的话 相当于多一次无意思的操作 因为replace之后还是放在同样的位置
Time complexity: o(nlogk)
Space complexity: o(k) k size heap & k size array  

public class Solution {
  public int[] kSmallest(int[] array, int k) {
    // Write your solution here
    if (array.length == 0 || k ==0) {
      return new int[0]; 
    }
    
    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>() {
      @Override 
      public int compare(Integer o1, Integer o2) {
        if (o1.equals(o2)) {
          return 0; 
        }
        
        return o1 > o2 ? -1 : 1; 
      }
    }); 
    
    for (int i = 0; i < array.length; i++) {
      if (i < k) {
        maxHeap.offer(array[i]); 
      } else if ( array[i] < maxHeap.peek()) {
        maxHeap.poll();
        maxHeap.offer(array[i]);
      }
    }
    
    int[] res = new int[k]; 
    
    for (int i = k - 1; i >= 0; i--) {
      res[i] = maxHeap.poll(); 
    }
    
    return res;
  }

}
