Given a linked list and a target value T, partition it such that all nodes less than T are listed
before the nodes larger than or equal to target value T. The original relative order of the nodes
in each of the two partitions should be preserved.

Examples

L = 2 -> 4 -> 3 -> 5 -> 1 -> null, T = 3, is partitioned to 2 -> 1 -> 4 -> 3 -> 5 -> null


Solution:

Step1: divide this list to two linked list, a larger one store the nodes larger or equals to the value, 
       a smaller one store the nodes that smaller than the value, 
Step2: linked this two lists. 

public class Solution {
  public ListNode partition(ListNode head, int target) {
    // write your solution here
    
    if (head == null || head.next == null) {
      return head; 
    }
    
    ListNode sDumm = new ListNode(0);
    ListNode lDumm = new ListNode(0);
    ListNode small = sDumm; 
    ListNode large = lDumm; 
    
    while (head != null) {
      if (head.value >= target) {
        large.next = head; 
        head = head.next;
        large = large.next; 
      } else {
        small.next = head; 
        head = head.next;
        small = small.next;
      }
    }
    
    small.next = lDumm.next; 
    large.next = null; 
    return sDumm.next;
  }
}
