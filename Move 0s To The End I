Given an array of integers, move all the 0s to the right end of the array.

The relative order of the elements in the original array does not need to be maintained.

Assumptions:

The given array is not null.
Examples:

{1} --> {1}
{1, 0, 3, 0, 1} --> {1, 3, 1, 0, 0} or {1, 1, 3, 0, 0} or {3, 1, 1, 0, 0}


Solution:

2 Index (zeroIndex, otherIndex) starts from the 0 and the right boundary of the array. 
[0,otherIndex): the number != 0 ;
[otherIndex, zeroIndex]: unexplore area;
(zeroIndex, right boundary]: 0s; 

public class Solution {
  public int[] moveZero(int[] array) {
    // Write your solution here.
    if (array.length == 0) {
      return array;
    }
    
    int zeroIndex = array.length - 1;
    int otherIndex = 0;
    
    while (otherIndex <= zeroIndex) {
      if (array[otherIndex] == 0) {
        int temp = array[otherIndex];
        array[otherIndex] = array[zeroIndex];
        array[zeroIndex] = temp;
        zeroIndex --;
      } else {
        otherIndex ++;
      }
    }
    return array;
  }    
}

老师的解法相当于在一次循环中两头一起找 这样时间上是n/2, if 左边非0，else if右边0，else(左边为0，右边为非0)
